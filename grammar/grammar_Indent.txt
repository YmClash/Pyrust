<program> ::= <statement_list>

<statement_list> ::= <statement>
                   | <statement_list> <statement>

<statement> ::= <variable_declaration>
              | <function_declaration>
              | <function_call>
              | <print_statement>
              | <comment>
              | <control_statement>
              | <loop_statement>
              | <import_statement>

<comment> ::= "#" <text>

<variable_declaration> ::= "let" <identifier> [":" <type>] "=" <expression>
                         | "let mut" <identifier> [":" <type>] "=" <expression>

<function_declaration> ::= "fn" <identifier> "(" <parameter_list> ")" [":" <type>] ":" <statement_list> "return" <expression>

<parameter_list> ::= <parameter>
                   | <parameter_list> "," <parameter>
                   | ""

<parameter> ::= <identifier> [":" <type>]

<function_call> ::= <identifier> "(" <argument_list> ")"

<argument_list> ::= <expression>
                  | <argument_list> "," <expression>
                  | ""

<print_statement> ::= "print" "(" <argument_list> ")"

<expression> ::= <identifier>
               | <number>
               | <string>
               | <expression> <binary_operator> <expression>
               | <unary_operator> <expression>
               | <function_call>
               | "(" <expression> ")"

<identifier> ::= <letter> { <letter> | <digit> }*

<number> ::= <digit> { <digit> }*

<string> ::= "\"" <text> "\""

<binary_operator> ::= "==" | "!=" | "<" | ">" | "<=" | ">="
                    | "+" | "-" | "*" | "/" | "%"
                    | "&&" | "||"
                    | "&" | "|" | "^" | "<<" | ">>"

<unary_operator> ::= "-" | "!" | "~"

<control_statement> ::= "if" <expression> ":" <statement_list>
                      | "elif" <expression> ":" <statement_list>
                      | "else" ":" <statement_list>
                      | "match" <expression> "{" <case_list> "}"

<case_list> ::= <case>
              | <case_list> <case>

<case> ::= <expression> "=>" <statement_list>

<loop_statement> ::= "for" <identifier> "in" <expression> ":" <statement_list>
                   | "while" <expression> ":" <statement_list>
                   | "loop" ":" <statement_list>
                   | "continue"
                   | "break"

<import_statement> ::= "import" <identifier>
                     | "from" <identifier> "import" <identifier>

<use_statement> ::= "use" <identifier>

<keywords> ::= "and" | "as" | "async" | "await" | "break" | "const"
             | "class" | "continue" | "def" | "del" | "elif" | "else"
             | "enum" | "except" | "false" | "fn" | "for" | "from"
             | "if" | "impl" | "import" | "in" | "is" | "lambda"
             | "let" | "loop" | "match" | "mod" | "mut" | "none"
             | "not" | "or" | "pub" | "pass" | "raise" | "return"
             | "self" | "static" | "struct" | "super" | "true"
             | "try" | "type" | "typeof" | "use" | "with" | "while"
             | "yield"

<delimiter> ::= "(" | ")" | "[" | "]" | "{" | "}" | ":" | "," | ";" | "."
              | "..." | "::"

<letter> ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z"
<digit>  ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<text> ::= { any character except newline }

<type> ::= "int" | "float" | "string" | "bool" | ...


////////////////////////////////////EBNF////////////////////////////////////


(* Programme *)
program = statement_list ;

(* Liste d'instructions *)
statement_list = statement, {statement} ;

(* Instruction *)
statement = variable_declaration | function_declaration | function_call | print_statement
          | comment | control_statement | loop_statement | import_statement ;

(* Commentaire *)
comment = "#", text ;

(* Déclaration de variable *)
variable_declaration = "let", ["mut"], identifier, [":", type], "=", expression ;

(* Déclaration de fonction *)
function_declaration = "fn", identifier, "(", [parameter_list], ")", [":", type], ":",
                       statement_list, "return", expression ;

(* Liste de paramètres *)
parameter_list = parameter, {",", parameter} ;
parameter = identifier, [":", type] ;

(* Appel de fonction *)
function_call = identifier, "(", [argument_list], ")" ;

(* Liste d'arguments *)
argument_list = expression, {",", expression} ;

(* Instruction d'impression *)
print_statement = "print", "(", [argument_list], ")" ;

(* Expression *)
expression = identifier | number | string
           | expression, binary_operator, expression
           | unary_operator, expression
           | function_call
           | "(", expression, ")" ;

(* Identificateur *)
identifier = letter, {letter | digit} ;

(* Nombre *)
number = digit, {digit} ;

(* Chaîne de caractères *)
string = '"', text, '"' ;

(* Opérateurs binaires *)
binary_operator = "==" | "!=" | "<" | ">" | "<=" | ">="
                | "+" | "-" | "*" | "/" | "%"
                | "&&" | "||"
                | "&" | "|" | "^" | "<<" | ">>" ;

(* Opérateurs unaires *)
unary_operator = "-" | "!" | "~" ;

(* Instruction de contrôle *)
control_statement = if_statement | match_statement ;

(* Instruction if-elif-else *)
if_statement = "if", expression, ":", statement_list,
               {"elif", expression, ":", statement_list},
               ["else", ":", statement_list] ;

(* Instruction match *)
match_statement = "match", expression, "{", case_list, "}" ;
case_list = case, {case} ;
case = expression, "=>", statement_list ;

(* Instruction de boucle *)
loop_statement = for_statement | while_statement | loop_statement | "continue" | "break" ;
for_statement = "for", identifier, "in", expression, ":", statement_list ;
while_statement = "while", expression, ":", statement_list ;
loop_statement = "loop", ":", statement_list ;

(* Instruction d'importation *)
import_statement = "import", identifier
                 | "from", identifier, "import", identifier ;

(* Instruction use *)
use_statement = "use", identifier ;

(* Mots-clés *)
keyword = "and" | "as" | "async" | "await" | "break" | "const" | "class" | "continue"
        | "def" | "del" | "elif" | "else" | "enum" | "except" | "false" | "fn" | "for"
        | "from" | "if" | "impl" | "import" | "in" | "is" | "lambda" | "let" | "loop"
        | "match" | "mod" | "mut" | "none" | "not" | "or" | "pub" | "pass" | "raise"
        | "return" | "self" | "static" | "struct" | "super" | "true" | "try" | "type"
        | "typeof" | "use" | "with" | "while" | "yield" ;

(* Délimiteurs *)
delimiter = "(" | ")" | "[" | "]" | "{" | "}" | ":" | "," | ";" | "." | "..." | "::" ;

(* Caractères de base *)
letter = "a" | ... | "z" | "A" | ... | "Z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
text = ? any character except newline ? ;

(* Types *)
type = "int" | "float" | "string" | "bool" | identifier ;